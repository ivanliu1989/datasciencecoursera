duplicated(state.list)
best <- function(state, outcome){
## Read outcome data
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- main.data[,7]
outcome.list <- c("heart attack","heart failure","pneumonia")
if(state ! in state.list){
print("invalid state")
}else if (outcome ! in outcome.list){
print("invalid outcome")
}else{
main.data <- main.data
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best <- function(state, outcome){
## Read outcome data
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- main.data[,7]
outcome.list <- c("heart attack","heart failure","pneumonia")
if(state not in state.list){
print("invalid state")
}else if (outcome not in outcome.list){
print("invalid outcome")
}else{
main.data <- main.data
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best <- function(state, outcome){
## Read outcome data
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- main.data[,7]
outcome.list <- c("heart attack","heart failure","pneumonia")
if(!is.element(state,state.list){
print("invalid state")
}else if (!is.element(outcome,outcome.list){
print("invalid outcome")
}else{
main.data <- main.data
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best <- function(state, outcome){
## Read outcome data
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- main.data[,7]
outcome.list <- c("heart attack","heart failure","pneumonia")
if(!is.element(state,state.list){
print("invalid state")
}else if (!is.element(outcome,outcome.list){
print("invalid outcome")
}else{
main.data <- main.data
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best <- function(state, outcome){
## Read outcome data
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- main.data[,7]
outcome.list <- c("heart attack","heart failure","pneumonia")
if(!is.element(state,state.list)){
print("invalid state")
}else if (!is.element(outcome,outcome.list)){
print("invalid outcome")
}else{
main.data <- main.data
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best(asd,qweq)
best("AL","heart attack")
best("wq","sd")
best("AL","sd")
best <- function(state, outcome){
## Read outcome data
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- main.data[,7]
outcome.list <- c("heart attack","heart failure","pneumonia")
if(!is.element(state,state.list)){
print("invalid state")
}else if (!is.element(outcome,outcome.list)){
print("invalid outcome")
}else{
main.data <- main.data[which(main.data$State==state),]
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AL","heart attack")
best <- function(state, outcome){
## Read outcome data
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- main.data[,7]
outcome.list <- c("heart attack","heart failure","pneumonia")
if(!is.element(state,state.list)){
print("invalid state")
}else if (!is.element(outcome,outcome.list)){
print("invalid outcome")
}else{
main.data <- main.data[which(main.data$State==state),]
return(head(main.data))
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best("AL","heart attack")
best <- function(state, outcome){
rate.col <- 0
## Read outcome data
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- main.data[,7]
outcome.list <- c("heart attack","heart failure","pneumonia")
if(!is.element(state,state.list)){
print("invalid state")
}else if (!is.element(outcome,outcome.list)){
print("invalid outcome")
}else{
if(outcome==outcome.list(1)){
rate.col <- 10
}else if (outcome =outcome.list(2)){
rate.col <- 17
}else {
rate.col <-23
}
main.data <- main.data[which(main.data$State==state),]
hospital <- main.data[which(main.data[rate.col,]=min(main.data[rate.col,]))]
return(head(main.data))
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best <- function(state, outcome){
rate.col <- 0
## Read outcome data
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- main.data[,7]
outcome.list <- c("heart attack","heart failure","pneumonia")
if(!is.element(state,state.list)){
print("invalid state")
}else if (!is.element(outcome,outcome.list)){
print("invalid outcome")
}else{
if(outcome==outcome.list(1)){
rate.col <- 10
}else if (outcome =outcome.list(2)){
rate.col <- 17
}else {
rate.col <-23
}
main.data <- main.data[which(main.data$State==state),]
hospital <- main.data[which(main.data[rate.col,]=min(main.data[rate.col,])),]
return(head(main.data))
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best <- function(state, outcome){
rate.col <- 0
## Read outcome data
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- main.data[,7]
outcome.list <- c("heart attack","heart failure","pneumonia")
if(!is.element(state,state.list)){
print("invalid state")
}else if (!is.element(outcome,outcome.list)){
print("invalid outcome")
}else{
if(outcome==outcome.list[1]){
rate.col <- 10
}else if (outcome =outcome.list[2]){
rate.col <- 17
}else {
rate.col <-23
}
main.data <- main.data[which(main.data$State==state),]
hospital <- main.data[which(main.data[rate.col,]=min(main.data[rate.col,])),]
return(head(main.data))
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best <- function(state, outcome){
rate.col <- 0
## Read outcome data
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- main.data[,7]
outcome.list <- c("heart attack","heart failure","pneumonia")
if(!is.element(state,state.list)){
print("invalid state")
}else if (!is.element(outcome,outcome.list)){
print("invalid outcome")
}else{
if(outcome==outcome.list[1]){
rate.col <- 10
}else if (outcome =outcome.list[2]){
rate.col <- 17
}else {
rate.col <-23
}
main.data <- main.data[which(main.data$State=state),]
hospital <- main.data[which(main.data[rate.col,]=min(main.data[rate.col,])),]
return(head(main.data))
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best <- function(state, outcome){
## Read outcome data
setwd("C:/Users/Ivan.liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/")
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- as.character(unique(main.data[,7]))
outcome.list <- c("heart attack","heart failure","pneumonia")
rate.col <- c(11,17,23)
if(!is.element(state,state.list)) stop ("Invalid state")
if(!is.element(outcome,outcome.list))stop ("Invalid outcome")
if(outcome==outcome.list[1]) rate.col = 11
if(outcome==outcome.list[2]) rate.col = 17
if(outcome==outcome.list[3]) rate.col = 23
## Return hospital name in that state with lowest 30-day death
state.data <- subset(main.data,State == state, select=c(1,rate.col))
valid_hospital <- order(xtfrm(state.data[,2]),decreasing=FALSE, na.last = NA)
ordered_data <- state.data[valid_hospital,]
## rate
return(ordered_data[1,1])
}
best("AL","heart attack")
setwd("C:/Users/Ivan.liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/")
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
main.data <- read.csv("/outcome-of-care-measures.csv",colClasses="character")
best <- function(state, outcome){
## Read outcome data
setwd("C:/Users/Ivan.liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/Hospital Quality Instructions/")
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- as.character(unique(main.data[,7]))
outcome.list <- c("heart attack","heart failure","pneumonia")
rate.col <- c(11,17,23)
if(!is.element(state,state.list)) stop ("Invalid state")
if(!is.element(outcome,outcome.list))stop ("Invalid outcome")
if(outcome==outcome.list[1]) rate.col = 11
if(outcome==outcome.list[2]) rate.col = 17
if(outcome==outcome.list[3]) rate.col = 23
## Return hospital name in that state with lowest 30-day death
state.data <- subset(main.data,State == state, select=c(1,rate.col))
valid_hospital <- order(xtfrm(state.data[,2]),decreasing=FALSE, na.last = NA)
ordered_data <- state.data[valid_hospital,]
## rate
return(ordered_data[1,1])
}
best("AL","heart attack")
best <- function(state, outcome){
## Read outcome data
setwd("C:/Users/Ivan.liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/Hospital Quality Instructions/")
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- as.character(unique(main.data[,7]))
outcome.list <- c("heart attack","heart failure","pneumonia")
rate.col <- c(11,17,23)
if(!is.element(state,state.list)) stop ("Invalid state")
if(!is.element(outcome,outcome.list))stop ("Invalid outcome")
if(outcome==outcome.list[1]) rate.col = 11
if(outcome==outcome.list[2]) rate.col = 17
if(outcome==outcome.list[3]) rate.col = 23
## Return hospital name in that state with lowest 30-day death
state.data <- subset(main.data,State == state, select=c(2,rate.col))
valid_hospital <- order(xtfrm(state.data[,2]),decreasing=FALSE, na.last = NA)
ordered_data <- state.data[valid_hospital,]
## rate
return(ordered_data[1,1])
}
best("AL","heart attack")
best("TX","heart attack")
best("TX","heart failure")
best("MD","heart attack")
best("MD","pneumonia")
best("BB","pneumonia")
best("NY","pnAeumonia")
best <- function(state, outcome){
## Read outcome data
setwd("C:/Users/Ivan.liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/Hospital Quality Instructions/")
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- as.character(unique(main.data[,7]))
outcome.list <- c("heart attack","heart failure","pneumonia")
rate.col <- c(11,17,23)
if(!is.element(state,state.list)) stop ("Invalid state")
if(!is.element(outcome,outcome.list))stop ("Invalid outcome")
if(outcome==outcome.list[1]) rate.col = 11
if(outcome==outcome.list[2]) rate.col = 17
if(outcome==outcome.list[3]) rate.col = 23
print(rate.col)
## Return hospital name in that state with lowest 30-day death
state.data <- subset(main.data,State == state, select=c(2,rate.col))
valid_hospital <- order(xtfrm(state.data[,2]),decreasing=FALSE, na.last = NA)
ordered_data <- state.data[valid_hospital,]
## rate
return(ordered_data[1,1])
}
best("MD","pneumonia")
best("MD","heart attack")
best("TX","heart failure")
?subset
?xtfrm
?order
colnamebest <- function(state, outcome){
## Read outcome data
setwd("C:/Users/Ivan.liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/Hospital Quality Instructions/")
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- as.character(unique(main.data[,7]))
outcome.list <- c("heart attack","heart failure","pneumonia")
rate.col <- c(11,17,23)
if(!is.element(state,state.list)) stop ("Invalid state")
if(!is.element(outcome,outcome.list))stop ("Invalid outcome")
if(outcome==outcome.list[1]) rate.col = 11
if(outcome==outcome.list[2]) rate.col = 17
if(outcome==outcome.list[3]) rate.col = 23
## Return hospital name in that state with lowest 30-day death
state.data <- subset(main.data,State == state, select=c(2,rate.col))
valid_hospital <- order(xtfrm(state.data[,2]),decreasing=FALSE, na.last = NA)
ordered_data <- state.data[valid_hospital,]
## rate
return(ordered_data[1,1])
print(colnames(state.data))
}
best("TX","heart failure")
best <- function(state, outcome){
## Read outcome data
setwd("C:/Users/Ivan.liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/Hospital Quality Instructions/")
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- as.character(unique(main.data[,7]))
outcome.list <- c("heart attack","heart failure","pneumonia")
rate.col <- c(11,17,23)
if(!is.element(state,state.list)) stop ("Invalid state")
if(!is.element(outcome,outcome.list))stop ("Invalid outcome")
if(outcome==outcome.list[1]) rate.col = 11
if(outcome==outcome.list[2]) rate.col = 17
if(outcome==outcome.list[3]) rate.col = 23
## Return hospital name in that state with lowest 30-day death
state.data <- subset(main.data,State == state, select=c(2,rate.col))
valid_hospital <- order(xtfrm(state.data[,2]),decreasing=FALSE, na.last = NA)
ordered_data <- state.data[valid_hospital,]
## rate
return(ordered_data[1,1])
print(colnames(state.data))
}
best("TX","heart failure")
best("MD","heart attack")
best <- function(state, outcome){
## Read outcome data
setwd("C:/Users/Ivan.liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/Hospital Quality Instructions/")
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- as.character(unique(main.data[,7]))
outcome.list <- c("heart attack","heart failure","pneumonia")
rate.col <- c(11,17,23)
if(!is.element(state,state.list)) stop ("Invalid state")
if(!is.element(outcome,outcome.list))stop ("Invalid outcome")
if(outcome==outcome.list[1]) rate.col = 11
if(outcome==outcome.list[2]) rate.col = 17
if(outcome==outcome.list[3]) rate.col = 23
## Return hospital name in that state with lowest 30-day death
state.data <- subset(main.data,State == state, select=c(2,rate.col))
valid_hospital <- order(xtfrm(state.data[,2]),decreasing=FALSE, na.last = NA)
ordered_data <- state.data[valid_hospital,]
## rate
print(colnames(state.data))
return(ordered_data[1,1])
}
best("MD","heart attack")
best("MD","heart failure")
best("MD","pneumonia")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
setwd("C:/Users/Ivan.liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/Hospital Quality Instructions/")
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
state.list <- as.character(unique(main.data[,7]))
outcome.list <- c("heart attack","heart failure","pneumonia")
rate.col <- c(11,17,23)
outcome<-"pneumonia"
state <-"NY"
if(outcome==outcome.list[1]) rate.col = 11
if(outcome==outcome.list[2]) rate.col = 17
if(outcome==outcome.list[3]) rate.col = 23
rate.col
state.data <- subset(main.data,State == state, select=c(2,rate.col))
state.date
state.data
valid_hospital <- order(xtfrm(state.data[,2]),decreasing=FALSE, na.last = NA)
valid_hospital
ordered_data <- state.data[valid_hospital,]
ordered_data
lowest_data <- ordered_data[which(ordered_data[,2]==ordered_data[1,2]),]
lowest_data
lowest_data <- lowest_data[order(lowestdata[,1]),]
lowest_data <- lowest_data[order(lowest_data[,1]),]
lowest_data
best <- function(state, outcome){
## Read outcome data
setwd("C:/Users/Ivan.liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/Hospital Quality Instructions/")
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- as.character(unique(main.data[,7]))
outcome.list <- c("heart attack","heart failure","pneumonia")
rate.col <- c(11,17,23)
if(!is.element(state,state.list)) stop ("Invalid state")
if(!is.element(outcome,outcome.list))stop ("Invalid outcome")
if(outcome==outcome.list[1]) rate.col = 11
if(outcome==outcome.list[2]) rate.col = 17
if(outcome==outcome.list[3]) rate.col = 23
## Return hospital name in that state with lowest 30-day death
state.data <- subset(main.data,State == state, select=c(2,rate.col))
valid_hospital <- order(xtfrm(state.data[,2]),decreasing=FALSE, na.last = NA)
ordered_data <- state.data[valid_hospital,]
lowest_data <- ordered_data[which(ordered_data[,2]==ordered_data[1,2]),]
lowest_data <- lowest_data[order(lowest_data[,1]),]
## rate
return(ordered_data[1,1])
}
best("TX","heart failure")
best <- function(state, outcome){
## Read outcome data
setwd("C:/Users/Ivan.liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/Hospital Quality Instructions/")
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- as.character(unique(main.data[,7]))
outcome.list <- c("heart attack","heart failure","pneumonia")
rate.col <- c(11,17,23)
if(!is.element(state,state.list)) stop ("Invalid state")
if(!is.element(outcome,outcome.list))stop ("Invalid outcome")
if(outcome==outcome.list[1]) rate.col = 11
if(outcome==outcome.list[2]) rate.col = 17
if(outcome==outcome.list[3]) rate.col = 23
## Return hospital name in that state with lowest 30-day death
state.data <- subset(main.data,State == state, select=c(2,rate.col))
valid_hospital <- order(xtfrm(state.data[,2]),decreasing=FALSE, na.last = NA)
ordered_data <- state.data[valid_hospital,]
lowest_data <- ordered_data[which(ordered_data[,2]==ordered_data[1,2]),]
lowest_data <- lowest_data[order(lowest_data[,1]),]
## rate
return(lowest_data[1,1])
}
best("TX","heart failure")
best("MD","heart attack")
best("MD","pneumonia")
setwd("C:/Users/Ivan.liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/Hospital Quality Instructions/")
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- as.character(unique(main.data[,7]))
outcome.list <- c("heart attack","heart failure","pneumonia")
rate.col <- c(11,17,23)
outcome
if(outcome==outcome.list[1]) rate.col = 11
if(outcome==outcome.list[2]) rate.col = 17
if(outcome==outcome.list[3]) rate.col = 23
state.data <- subset(main.data,State == state, select=c(2,rate.col))
valid_hospital <- order(xtfrm(toNumeric(state.data[,2])),decreasing=FALSE, na.last = NA)
ordered_data <- state.data[valid_hospital,]
state.data <- subset(main.data,State == state, select=c(2,rate.col))
valid_hospital <- order(xtfrm(state.data[,2]),decreasing=FALSE, na.last = NA)
ordered_data <- state.data[valid_hospital,]
ordered_data
valid_hospital <- order(xtfrm(as.numeric(state.data[,2])),decreasing=FALSE, na.last = NA)
ordered_data <- state.data[valid_hospital,]
ordered_data
best <- function(state, outcome){
## Read outcome data
setwd("C:/Users/Ivan.liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/Hospital Quality Instructions/")
main.data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
state.list <- as.character(unique(main.data[,7]))
outcome.list <- c("heart attack","heart failure","pneumonia")
rate.col <- c(11,17,23)
if(!is.element(state,state.list)) stop ("Invalid state")
if(!is.element(outcome,outcome.list))stop ("Invalid outcome")
if(outcome==outcome.list[1]) rate.col = 11
if(outcome==outcome.list[2]) rate.col = 17
if(outcome==outcome.list[3]) rate.col = 23
## Return hospital name in that state with lowest 30-day death
state.data <- subset(main.data,State == state, select=c(2,rate.col))
valid_hospital <- order(xtfrm(as.numeric(state.data[,2])),decreasing=FALSE, na.last = NA)
ordered_data <- state.data[valid_hospital,]
lowest_data <- ordered_data[which(ordered_data[,2]==ordered_data[1,2]),]
lowest_data <- lowest_data[order(lowest_data[,1]),]
## rate
return(lowest_data[1,1])
}
best("TX","heart failure")
best("MD","pneumonia")
submit()
submit()
