m
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x<<-y
m<<-NULL
}
get<-function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set=set,
get=get,
setinverse=setinverse,
getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
x<- matrix(rnorm(72,64,50))
x
x<- matrix(rnorm(72,64,50),nrow = 8,ncol = 9)
x
makeCacheMatrix(x)
m<-makeCacheMatrix(x)
result <- cacheSolve(m)
x<- matrix(rnorm(81,64,50),nrow = 9,ncol = 9)
m<-makeCacheMatrix(x)
result <- cacheSolve(m)
result
x
solve(x)
x<- matrix(rnorm(10000,64,50),nrow = 100,ncol = 100)
solve(x)
m<-makeCacheMatrix(x)
result <- cacheSolve(m)
result
x<- matrix(rnorm(36,64,50),nrow = 6,ncol = 6)
m<-makeCacheMatrix(x)
result <- cacheSolve(m)
result
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
result <- cacheSolve(m)
result
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
## A pair of functions that cache the inverse of a matrix
## This function creates a special "matrix" object
## that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x<<-y
m<<-NULL
}
get<-function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set=set,
get=get,
setinverse=setinverse,
getinverse=getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above. If the inverse has alreadly
## been calculated (and the matrix has not changed), then the
## cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
result <- cacheSolve(x)
m<-makeCacheMatrix(x)
result <- cacheSolve(x)
result <- cacheSolve(m)
cacheSolve(m)
